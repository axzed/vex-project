// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.20.1
// source: task_service.proto

package task

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TaskReqMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemberId       int64    `protobuf:"varint,1,opt,name=memberId,proto3" json:"memberId,omitempty"`
	ProjectCode    string   `protobuf:"bytes,2,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
	Page           int64    `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	PageSize       int64    `protobuf:"varint,4,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	StageCode      string   `protobuf:"bytes,5,opt,name=stageCode,proto3" json:"stageCode,omitempty"`
	Name           string   `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	AssignTo       string   `protobuf:"bytes,7,opt,name=assignTo,proto3" json:"assignTo,omitempty"`
	TaskType       int32    `protobuf:"varint,8,opt,name=taskType,proto3" json:"taskType,omitempty"`
	Type           int32    `protobuf:"varint,9,opt,name=type,proto3" json:"type,omitempty"`
	PreTaskCode    string   `protobuf:"bytes,10,opt,name=preTaskCode,proto3" json:"preTaskCode,omitempty"`
	NextTaskCode   string   `protobuf:"bytes,11,opt,name=nextTaskCode,proto3" json:"nextTaskCode,omitempty"`
	ToStageCode    string   `protobuf:"bytes,12,opt,name=toStageCode,proto3" json:"toStageCode,omitempty"`
	TaskCode       string   `protobuf:"bytes,13,opt,name=taskCode,proto3" json:"taskCode,omitempty"`
	All            int32    `protobuf:"varint,14,opt,name=all,proto3" json:"all,omitempty"`
	Comment        int32    `protobuf:"varint,15,opt,name=comment,proto3" json:"comment,omitempty"`
	Content        string   `protobuf:"bytes,16,opt,name=content,proto3" json:"content,omitempty"`
	Num            int32    `protobuf:"varint,17,opt,name=num,proto3" json:"num,omitempty"`
	BeginTime      int64    `protobuf:"varint,18,opt,name=beginTime,proto3" json:"beginTime,omitempty"`
	CommentContent string   `protobuf:"bytes,19,opt,name=commentContent,proto3" json:"commentContent,omitempty"`
	Mentions       []string `protobuf:"bytes,20,rep,name=Mentions,proto3" json:"Mentions,omitempty"`
}

func (x *TaskReqMessage) Reset() {
	*x = TaskReqMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskReqMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskReqMessage) ProtoMessage() {}

func (x *TaskReqMessage) ProtoReflect() protoreflect.Message {
	mi := &file_task_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskReqMessage.ProtoReflect.Descriptor instead.
func (*TaskReqMessage) Descriptor() ([]byte, []int) {
	return file_task_service_proto_rawDescGZIP(), []int{0}
}

func (x *TaskReqMessage) GetMemberId() int64 {
	if x != nil {
		return x.MemberId
	}
	return 0
}

func (x *TaskReqMessage) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *TaskReqMessage) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *TaskReqMessage) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *TaskReqMessage) GetStageCode() string {
	if x != nil {
		return x.StageCode
	}
	return ""
}

func (x *TaskReqMessage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaskReqMessage) GetAssignTo() string {
	if x != nil {
		return x.AssignTo
	}
	return ""
}

func (x *TaskReqMessage) GetTaskType() int32 {
	if x != nil {
		return x.TaskType
	}
	return 0
}

func (x *TaskReqMessage) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *TaskReqMessage) GetPreTaskCode() string {
	if x != nil {
		return x.PreTaskCode
	}
	return ""
}

func (x *TaskReqMessage) GetNextTaskCode() string {
	if x != nil {
		return x.NextTaskCode
	}
	return ""
}

func (x *TaskReqMessage) GetToStageCode() string {
	if x != nil {
		return x.ToStageCode
	}
	return ""
}

func (x *TaskReqMessage) GetTaskCode() string {
	if x != nil {
		return x.TaskCode
	}
	return ""
}

func (x *TaskReqMessage) GetAll() int32 {
	if x != nil {
		return x.All
	}
	return 0
}

func (x *TaskReqMessage) GetComment() int32 {
	if x != nil {
		return x.Comment
	}
	return 0
}

func (x *TaskReqMessage) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *TaskReqMessage) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *TaskReqMessage) GetBeginTime() int64 {
	if x != nil {
		return x.BeginTime
	}
	return 0
}

func (x *TaskReqMessage) GetCommentContent() string {
	if x != nil {
		return x.CommentContent
	}
	return ""
}

func (x *TaskReqMessage) GetMentions() []string {
	if x != nil {
		return x.Mentions
	}
	return nil
}

type TaskStagesMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code        string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ProjectCode string `protobuf:"bytes,3,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
	Sort        int32  `protobuf:"varint,4,opt,name=sort,proto3" json:"sort,omitempty"`
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	CreateTime  string `protobuf:"bytes,6,opt,name=createTime,proto3" json:"createTime,omitempty"`
	Deleted     int32  `protobuf:"varint,7,opt,name=deleted,proto3" json:"deleted,omitempty"`
	Id          int32  `protobuf:"varint,8,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TaskStagesMessage) Reset() {
	*x = TaskStagesMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskStagesMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskStagesMessage) ProtoMessage() {}

func (x *TaskStagesMessage) ProtoReflect() protoreflect.Message {
	mi := &file_task_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskStagesMessage.ProtoReflect.Descriptor instead.
func (*TaskStagesMessage) Descriptor() ([]byte, []int) {
	return file_task_service_proto_rawDescGZIP(), []int{1}
}

func (x *TaskStagesMessage) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *TaskStagesMessage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaskStagesMessage) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *TaskStagesMessage) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *TaskStagesMessage) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TaskStagesMessage) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *TaskStagesMessage) GetDeleted() int32 {
	if x != nil {
		return x.Deleted
	}
	return 0
}

func (x *TaskStagesMessage) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type TaskStagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64                `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*TaskStagesMessage `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *TaskStagesResponse) Reset() {
	*x = TaskStagesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskStagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskStagesResponse) ProtoMessage() {}

func (x *TaskStagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_task_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskStagesResponse.ProtoReflect.Descriptor instead.
func (*TaskStagesResponse) Descriptor() ([]byte, []int) {
	return file_task_service_proto_rawDescGZIP(), []int{2}
}

func (x *TaskStagesResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *TaskStagesResponse) GetList() []*TaskStagesMessage {
	if x != nil {
		return x.List
	}
	return nil
}

type MemberProjectMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Avatar     string `protobuf:"bytes,2,opt,name=avatar,proto3" json:"avatar,omitempty"`
	MemberCode int64  `protobuf:"varint,3,opt,name=memberCode,proto3" json:"memberCode,omitempty"`
	Code       string `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	Email      string `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`
	IsOwner    int32  `protobuf:"varint,6,opt,name=isOwner,proto3" json:"isOwner,omitempty"`
}

func (x *MemberProjectMessage) Reset() {
	*x = MemberProjectMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberProjectMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberProjectMessage) ProtoMessage() {}

func (x *MemberProjectMessage) ProtoReflect() protoreflect.Message {
	mi := &file_task_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberProjectMessage.ProtoReflect.Descriptor instead.
func (*MemberProjectMessage) Descriptor() ([]byte, []int) {
	return file_task_service_proto_rawDescGZIP(), []int{3}
}

func (x *MemberProjectMessage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MemberProjectMessage) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *MemberProjectMessage) GetMemberCode() int64 {
	if x != nil {
		return x.MemberCode
	}
	return 0
}

func (x *MemberProjectMessage) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *MemberProjectMessage) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *MemberProjectMessage) GetIsOwner() int32 {
	if x != nil {
		return x.IsOwner
	}
	return 0
}

type MemberProjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64                   `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*MemberProjectMessage `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *MemberProjectResponse) Reset() {
	*x = MemberProjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberProjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberProjectResponse) ProtoMessage() {}

func (x *MemberProjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_task_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberProjectResponse.ProtoReflect.Descriptor instead.
func (*MemberProjectResponse) Descriptor() ([]byte, []int) {
	return file_task_service_proto_rawDescGZIP(), []int{4}
}

func (x *MemberProjectResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *MemberProjectResponse) GetList() []*MemberProjectMessage {
	if x != nil {
		return x.List
	}
	return nil
}

type TaskMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64            `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	ProjectCode   string           `protobuf:"bytes,2,opt,name=ProjectCode,proto3" json:"ProjectCode,omitempty"`
	Name          string           `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	Pri           int32            `protobuf:"varint,4,opt,name=Pri,proto3" json:"Pri,omitempty"`
	ExecuteStatus string           `protobuf:"bytes,5,opt,name=ExecuteStatus,proto3" json:"ExecuteStatus,omitempty"`
	Description   string           `protobuf:"bytes,6,opt,name=Description,proto3" json:"Description,omitempty"`
	CreateBy      string           `protobuf:"bytes,7,opt,name=CreateBy,proto3" json:"CreateBy,omitempty"`
	DoneBy        string           `protobuf:"bytes,8,opt,name=DoneBy,proto3" json:"DoneBy,omitempty"`
	DoneTime      string           `protobuf:"bytes,9,opt,name=DoneTime,proto3" json:"DoneTime,omitempty"`
	CreateTime    string           `protobuf:"bytes,10,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`
	AssignTo      string           `protobuf:"bytes,11,opt,name=AssignTo,proto3" json:"AssignTo,omitempty"`
	Deleted       int32            `protobuf:"varint,12,opt,name=Deleted,proto3" json:"Deleted,omitempty"`
	StageCode     string           `protobuf:"bytes,13,opt,name=StageCode,proto3" json:"StageCode,omitempty"`
	TaskTag       string           `protobuf:"bytes,14,opt,name=TaskTag,proto3" json:"TaskTag,omitempty"`
	Done          int32            `protobuf:"varint,15,opt,name=Done,proto3" json:"Done,omitempty"`
	BeginTime     string           `protobuf:"bytes,16,opt,name=BeginTime,proto3" json:"BeginTime,omitempty"`
	EndTime       string           `protobuf:"bytes,17,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
	RemindTime    string           `protobuf:"bytes,18,opt,name=RemindTime,proto3" json:"RemindTime,omitempty"`
	Pcode         string           `protobuf:"bytes,19,opt,name=Pcode,proto3" json:"Pcode,omitempty"`
	Sort          int32            `protobuf:"varint,20,opt,name=Sort,proto3" json:"Sort,omitempty"`
	Like          int32            `protobuf:"varint,21,opt,name=Like,proto3" json:"Like,omitempty"`
	Star          int32            `protobuf:"varint,22,opt,name=Star,proto3" json:"Star,omitempty"`
	DeletedTime   string           `protobuf:"bytes,23,opt,name=DeletedTime,proto3" json:"DeletedTime,omitempty"`
	Private       int32            `protobuf:"varint,24,opt,name=Private,proto3" json:"Private,omitempty"`
	IdNum         int32            `protobuf:"varint,25,opt,name=IdNum,proto3" json:"IdNum,omitempty"`
	Path          string           `protobuf:"bytes,26,opt,name=Path,proto3" json:"Path,omitempty"`
	Schedule      int32            `protobuf:"varint,27,opt,name=Schedule,proto3" json:"Schedule,omitempty"`
	VersionCode   string           `protobuf:"bytes,28,opt,name=VersionCode,proto3" json:"VersionCode,omitempty"`
	FeaturesCode  string           `protobuf:"bytes,29,opt,name=FeaturesCode,proto3" json:"FeaturesCode,omitempty"`
	WorkTime      int32            `protobuf:"varint,30,opt,name=WorkTime,proto3" json:"WorkTime,omitempty"`
	Status        int32            `protobuf:"varint,31,opt,name=Status,proto3" json:"Status,omitempty"`
	Code          string           `protobuf:"bytes,32,opt,name=code,proto3" json:"code,omitempty"`
	CanRead       int32            `protobuf:"varint,33,opt,name=canRead,proto3" json:"canRead,omitempty"`
	Executor      *ExecutorMessage `protobuf:"bytes,34,opt,name=executor,proto3" json:"executor,omitempty"`
	ProjectName   string           `protobuf:"bytes,35,opt,name=projectName,proto3" json:"projectName,omitempty"`
	StageName     string           `protobuf:"bytes,36,opt,name=stageName,proto3" json:"stageName,omitempty"`
	PriText       string           `protobuf:"bytes,37,opt,name=priText,proto3" json:"priText,omitempty"`
	StatusText    string           `protobuf:"bytes,38,opt,name=statusText,proto3" json:"statusText,omitempty"`
}

func (x *TaskMessage) Reset() {
	*x = TaskMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskMessage) ProtoMessage() {}

func (x *TaskMessage) ProtoReflect() protoreflect.Message {
	mi := &file_task_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskMessage.ProtoReflect.Descriptor instead.
func (*TaskMessage) Descriptor() ([]byte, []int) {
	return file_task_service_proto_rawDescGZIP(), []int{5}
}

func (x *TaskMessage) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TaskMessage) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *TaskMessage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaskMessage) GetPri() int32 {
	if x != nil {
		return x.Pri
	}
	return 0
}

func (x *TaskMessage) GetExecuteStatus() string {
	if x != nil {
		return x.ExecuteStatus
	}
	return ""
}

func (x *TaskMessage) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TaskMessage) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *TaskMessage) GetDoneBy() string {
	if x != nil {
		return x.DoneBy
	}
	return ""
}

func (x *TaskMessage) GetDoneTime() string {
	if x != nil {
		return x.DoneTime
	}
	return ""
}

func (x *TaskMessage) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *TaskMessage) GetAssignTo() string {
	if x != nil {
		return x.AssignTo
	}
	return ""
}

func (x *TaskMessage) GetDeleted() int32 {
	if x != nil {
		return x.Deleted
	}
	return 0
}

func (x *TaskMessage) GetStageCode() string {
	if x != nil {
		return x.StageCode
	}
	return ""
}

func (x *TaskMessage) GetTaskTag() string {
	if x != nil {
		return x.TaskTag
	}
	return ""
}

func (x *TaskMessage) GetDone() int32 {
	if x != nil {
		return x.Done
	}
	return 0
}

func (x *TaskMessage) GetBeginTime() string {
	if x != nil {
		return x.BeginTime
	}
	return ""
}

func (x *TaskMessage) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *TaskMessage) GetRemindTime() string {
	if x != nil {
		return x.RemindTime
	}
	return ""
}

func (x *TaskMessage) GetPcode() string {
	if x != nil {
		return x.Pcode
	}
	return ""
}

func (x *TaskMessage) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *TaskMessage) GetLike() int32 {
	if x != nil {
		return x.Like
	}
	return 0
}

func (x *TaskMessage) GetStar() int32 {
	if x != nil {
		return x.Star
	}
	return 0
}

func (x *TaskMessage) GetDeletedTime() string {
	if x != nil {
		return x.DeletedTime
	}
	return ""
}

func (x *TaskMessage) GetPrivate() int32 {
	if x != nil {
		return x.Private
	}
	return 0
}

func (x *TaskMessage) GetIdNum() int32 {
	if x != nil {
		return x.IdNum
	}
	return 0
}

func (x *TaskMessage) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *TaskMessage) GetSchedule() int32 {
	if x != nil {
		return x.Schedule
	}
	return 0
}

func (x *TaskMessage) GetVersionCode() string {
	if x != nil {
		return x.VersionCode
	}
	return ""
}

func (x *TaskMessage) GetFeaturesCode() string {
	if x != nil {
		return x.FeaturesCode
	}
	return ""
}

func (x *TaskMessage) GetWorkTime() int32 {
	if x != nil {
		return x.WorkTime
	}
	return 0
}

func (x *TaskMessage) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *TaskMessage) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *TaskMessage) GetCanRead() int32 {
	if x != nil {
		return x.CanRead
	}
	return 0
}

func (x *TaskMessage) GetExecutor() *ExecutorMessage {
	if x != nil {
		return x.Executor
	}
	return nil
}

func (x *TaskMessage) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *TaskMessage) GetStageName() string {
	if x != nil {
		return x.StageName
	}
	return ""
}

func (x *TaskMessage) GetPriText() string {
	if x != nil {
		return x.PriText
	}
	return ""
}

func (x *TaskMessage) GetStatusText() string {
	if x != nil {
		return x.StatusText
	}
	return ""
}

type ExecutorMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Avatar string `protobuf:"bytes,2,opt,name=Avatar,proto3" json:"Avatar,omitempty"`
	Code   string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *ExecutorMessage) Reset() {
	*x = ExecutorMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutorMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutorMessage) ProtoMessage() {}

func (x *ExecutorMessage) ProtoReflect() protoreflect.Message {
	mi := &file_task_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutorMessage.ProtoReflect.Descriptor instead.
func (*ExecutorMessage) Descriptor() ([]byte, []int) {
	return file_task_service_proto_rawDescGZIP(), []int{6}
}

func (x *ExecutorMessage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExecutorMessage) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *ExecutorMessage) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type TaskListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*TaskMessage `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *TaskListResponse) Reset() {
	*x = TaskListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskListResponse) ProtoMessage() {}

func (x *TaskListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_task_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskListResponse.ProtoReflect.Descriptor instead.
func (*TaskListResponse) Descriptor() ([]byte, []int) {
	return file_task_service_proto_rawDescGZIP(), []int{7}
}

func (x *TaskListResponse) GetList() []*TaskMessage {
	if x != nil {
		return x.List
	}
	return nil
}

type TaskSortResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TaskSortResponse) Reset() {
	*x = TaskSortResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskSortResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskSortResponse) ProtoMessage() {}

func (x *TaskSortResponse) ProtoReflect() protoreflect.Message {
	mi := &file_task_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskSortResponse.ProtoReflect.Descriptor instead.
func (*TaskSortResponse) Descriptor() ([]byte, []int) {
	return file_task_service_proto_rawDescGZIP(), []int{8}
}

type MyTaskMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 int64            `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	ProjectCode        string           `protobuf:"bytes,2,opt,name=ProjectCode,proto3" json:"ProjectCode,omitempty"`
	Name               string           `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	Pri                int32            `protobuf:"varint,4,opt,name=Pri,proto3" json:"Pri,omitempty"`
	ExecuteStatus      string           `protobuf:"bytes,5,opt,name=ExecuteStatus,proto3" json:"ExecuteStatus,omitempty"`
	Description        string           `protobuf:"bytes,6,opt,name=Description,proto3" json:"Description,omitempty"`
	CreateBy           string           `protobuf:"bytes,7,opt,name=CreateBy,proto3" json:"CreateBy,omitempty"`
	DoneBy             string           `protobuf:"bytes,8,opt,name=DoneBy,proto3" json:"DoneBy,omitempty"`
	DoneTime           string           `protobuf:"bytes,9,opt,name=DoneTime,proto3" json:"DoneTime,omitempty"`
	CreateTime         string           `protobuf:"bytes,10,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`
	AssignTo           string           `protobuf:"bytes,11,opt,name=AssignTo,proto3" json:"AssignTo,omitempty"`
	Deleted            int32            `protobuf:"varint,12,opt,name=Deleted,proto3" json:"Deleted,omitempty"`
	StageCode          string           `protobuf:"bytes,13,opt,name=StageCode,proto3" json:"StageCode,omitempty"`
	TaskTag            string           `protobuf:"bytes,14,opt,name=TaskTag,proto3" json:"TaskTag,omitempty"`
	Done               int32            `protobuf:"varint,15,opt,name=Done,proto3" json:"Done,omitempty"`
	BeginTime          string           `protobuf:"bytes,16,opt,name=BeginTime,proto3" json:"BeginTime,omitempty"`
	EndTime            string           `protobuf:"bytes,17,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
	RemindTime         string           `protobuf:"bytes,18,opt,name=RemindTime,proto3" json:"RemindTime,omitempty"`
	Pcode              string           `protobuf:"bytes,19,opt,name=Pcode,proto3" json:"Pcode,omitempty"`
	Sort               int32            `protobuf:"varint,20,opt,name=Sort,proto3" json:"Sort,omitempty"`
	Like               int32            `protobuf:"varint,21,opt,name=Like,proto3" json:"Like,omitempty"`
	Star               int32            `protobuf:"varint,22,opt,name=Star,proto3" json:"Star,omitempty"`
	DeletedTime        string           `protobuf:"bytes,23,opt,name=DeletedTime,proto3" json:"DeletedTime,omitempty"`
	Private            int32            `protobuf:"varint,24,opt,name=Private,proto3" json:"Private,omitempty"`
	IdNum              int32            `protobuf:"varint,25,opt,name=IdNum,proto3" json:"IdNum,omitempty"`
	Path               string           `protobuf:"bytes,26,opt,name=Path,proto3" json:"Path,omitempty"`
	Schedule           int32            `protobuf:"varint,27,opt,name=Schedule,proto3" json:"Schedule,omitempty"`
	VersionCode        string           `protobuf:"bytes,28,opt,name=VersionCode,proto3" json:"VersionCode,omitempty"`
	FeaturesCode       string           `protobuf:"bytes,29,opt,name=FeaturesCode,proto3" json:"FeaturesCode,omitempty"`
	WorkTime           int32            `protobuf:"varint,30,opt,name=WorkTime,proto3" json:"WorkTime,omitempty"`
	Status             int32            `protobuf:"varint,31,opt,name=Status,proto3" json:"Status,omitempty"`
	Code               string           `protobuf:"bytes,32,opt,name=code,proto3" json:"code,omitempty"`
	Cover              string           `protobuf:"bytes,33,opt,name=Cover,proto3" json:"Cover,omitempty"`
	AccessControlType  string           `protobuf:"bytes,34,opt,name=AccessControlType,proto3" json:"AccessControlType,omitempty"`
	WhiteList          string           `protobuf:"bytes,35,opt,name=WhiteList,proto3" json:"WhiteList,omitempty"`
	Order              int32            `protobuf:"varint,36,opt,name=Order,proto3" json:"Order,omitempty"`
	TemplateCode       string           `protobuf:"bytes,37,opt,name=TemplateCode,proto3" json:"TemplateCode,omitempty"`
	OrganizationCode   string           `protobuf:"bytes,38,opt,name=OrganizationCode,proto3" json:"OrganizationCode,omitempty"`
	Prefix             string           `protobuf:"bytes,39,opt,name=Prefix,proto3" json:"Prefix,omitempty"`
	OpenPrefix         int32            `protobuf:"varint,40,opt,name=OpenPrefix,proto3" json:"OpenPrefix,omitempty"`
	Archive            int32            `protobuf:"varint,41,opt,name=Archive,proto3" json:"Archive,omitempty"`
	ArchiveTime        int64            `protobuf:"varint,42,opt,name=ArchiveTime,proto3" json:"ArchiveTime,omitempty"`
	OpenBeginTime      int32            `protobuf:"varint,43,opt,name=OpenBeginTime,proto3" json:"OpenBeginTime,omitempty"`
	OpenTaskPrivate    int32            `protobuf:"varint,44,opt,name=OpenTaskPrivate,proto3" json:"OpenTaskPrivate,omitempty"`
	TaskBoardTheme     string           `protobuf:"bytes,45,opt,name=TaskBoardTheme,proto3" json:"TaskBoardTheme,omitempty"`
	AutoUpdateSchedule int32            `protobuf:"varint,46,opt,name=AutoUpdateSchedule,proto3" json:"AutoUpdateSchedule,omitempty"`
	Executor           *ExecutorMessage `protobuf:"bytes,47,opt,name=executor,proto3" json:"executor,omitempty"`
	ProjectName        string           `protobuf:"bytes,48,opt,name=projectName,proto3" json:"projectName,omitempty"`
}

func (x *MyTaskMessage) Reset() {
	*x = MyTaskMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyTaskMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyTaskMessage) ProtoMessage() {}

func (x *MyTaskMessage) ProtoReflect() protoreflect.Message {
	mi := &file_task_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyTaskMessage.ProtoReflect.Descriptor instead.
func (*MyTaskMessage) Descriptor() ([]byte, []int) {
	return file_task_service_proto_rawDescGZIP(), []int{9}
}

func (x *MyTaskMessage) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MyTaskMessage) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *MyTaskMessage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MyTaskMessage) GetPri() int32 {
	if x != nil {
		return x.Pri
	}
	return 0
}

func (x *MyTaskMessage) GetExecuteStatus() string {
	if x != nil {
		return x.ExecuteStatus
	}
	return ""
}

func (x *MyTaskMessage) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MyTaskMessage) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *MyTaskMessage) GetDoneBy() string {
	if x != nil {
		return x.DoneBy
	}
	return ""
}

func (x *MyTaskMessage) GetDoneTime() string {
	if x != nil {
		return x.DoneTime
	}
	return ""
}

func (x *MyTaskMessage) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *MyTaskMessage) GetAssignTo() string {
	if x != nil {
		return x.AssignTo
	}
	return ""
}

func (x *MyTaskMessage) GetDeleted() int32 {
	if x != nil {
		return x.Deleted
	}
	return 0
}

func (x *MyTaskMessage) GetStageCode() string {
	if x != nil {
		return x.StageCode
	}
	return ""
}

func (x *MyTaskMessage) GetTaskTag() string {
	if x != nil {
		return x.TaskTag
	}
	return ""
}

func (x *MyTaskMessage) GetDone() int32 {
	if x != nil {
		return x.Done
	}
	return 0
}

func (x *MyTaskMessage) GetBeginTime() string {
	if x != nil {
		return x.BeginTime
	}
	return ""
}

func (x *MyTaskMessage) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *MyTaskMessage) GetRemindTime() string {
	if x != nil {
		return x.RemindTime
	}
	return ""
}

func (x *MyTaskMessage) GetPcode() string {
	if x != nil {
		return x.Pcode
	}
	return ""
}

func (x *MyTaskMessage) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *MyTaskMessage) GetLike() int32 {
	if x != nil {
		return x.Like
	}
	return 0
}

func (x *MyTaskMessage) GetStar() int32 {
	if x != nil {
		return x.Star
	}
	return 0
}

func (x *MyTaskMessage) GetDeletedTime() string {
	if x != nil {
		return x.DeletedTime
	}
	return ""
}

func (x *MyTaskMessage) GetPrivate() int32 {
	if x != nil {
		return x.Private
	}
	return 0
}

func (x *MyTaskMessage) GetIdNum() int32 {
	if x != nil {
		return x.IdNum
	}
	return 0
}

func (x *MyTaskMessage) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *MyTaskMessage) GetSchedule() int32 {
	if x != nil {
		return x.Schedule
	}
	return 0
}

func (x *MyTaskMessage) GetVersionCode() string {
	if x != nil {
		return x.VersionCode
	}
	return ""
}

func (x *MyTaskMessage) GetFeaturesCode() string {
	if x != nil {
		return x.FeaturesCode
	}
	return ""
}

func (x *MyTaskMessage) GetWorkTime() int32 {
	if x != nil {
		return x.WorkTime
	}
	return 0
}

func (x *MyTaskMessage) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *MyTaskMessage) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *MyTaskMessage) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *MyTaskMessage) GetAccessControlType() string {
	if x != nil {
		return x.AccessControlType
	}
	return ""
}

func (x *MyTaskMessage) GetWhiteList() string {
	if x != nil {
		return x.WhiteList
	}
	return ""
}

func (x *MyTaskMessage) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *MyTaskMessage) GetTemplateCode() string {
	if x != nil {
		return x.TemplateCode
	}
	return ""
}

func (x *MyTaskMessage) GetOrganizationCode() string {
	if x != nil {
		return x.OrganizationCode
	}
	return ""
}

func (x *MyTaskMessage) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *MyTaskMessage) GetOpenPrefix() int32 {
	if x != nil {
		return x.OpenPrefix
	}
	return 0
}

func (x *MyTaskMessage) GetArchive() int32 {
	if x != nil {
		return x.Archive
	}
	return 0
}

func (x *MyTaskMessage) GetArchiveTime() int64 {
	if x != nil {
		return x.ArchiveTime
	}
	return 0
}

func (x *MyTaskMessage) GetOpenBeginTime() int32 {
	if x != nil {
		return x.OpenBeginTime
	}
	return 0
}

func (x *MyTaskMessage) GetOpenTaskPrivate() int32 {
	if x != nil {
		return x.OpenTaskPrivate
	}
	return 0
}

func (x *MyTaskMessage) GetTaskBoardTheme() string {
	if x != nil {
		return x.TaskBoardTheme
	}
	return ""
}

func (x *MyTaskMessage) GetAutoUpdateSchedule() int32 {
	if x != nil {
		return x.AutoUpdateSchedule
	}
	return 0
}

func (x *MyTaskMessage) GetExecutor() *ExecutorMessage {
	if x != nil {
		return x.Executor
	}
	return nil
}

func (x *MyTaskMessage) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

type MyTaskListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*MyTaskMessage `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Total int64            `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *MyTaskListResponse) Reset() {
	*x = MyTaskListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyTaskListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyTaskListResponse) ProtoMessage() {}

func (x *MyTaskListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_task_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyTaskListResponse.ProtoReflect.Descriptor instead.
func (*MyTaskListResponse) Descriptor() ([]byte, []int) {
	return file_task_service_proto_rawDescGZIP(), []int{10}
}

func (x *MyTaskListResponse) GetList() []*MyTaskMessage {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *MyTaskListResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type TaskMemberMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name              string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Avatar            string `protobuf:"bytes,3,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Code              string `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	MembarAccountCode string `protobuf:"bytes,5,opt,name=membarAccountCode,proto3" json:"membarAccountCode,omitempty"`
	IsExecutor        int32  `protobuf:"varint,6,opt,name=isExecutor,proto3" json:"isExecutor,omitempty"`
	IsOwner           int32  `protobuf:"varint,7,opt,name=isOwner,proto3" json:"isOwner,omitempty"`
}

func (x *TaskMemberMessage) Reset() {
	*x = TaskMemberMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskMemberMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskMemberMessage) ProtoMessage() {}

func (x *TaskMemberMessage) ProtoReflect() protoreflect.Message {
	mi := &file_task_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskMemberMessage.ProtoReflect.Descriptor instead.
func (*TaskMemberMessage) Descriptor() ([]byte, []int) {
	return file_task_service_proto_rawDescGZIP(), []int{11}
}

func (x *TaskMemberMessage) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TaskMemberMessage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaskMemberMessage) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *TaskMemberMessage) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *TaskMemberMessage) GetMembarAccountCode() string {
	if x != nil {
		return x.MembarAccountCode
	}
	return ""
}

func (x *TaskMemberMessage) GetIsExecutor() int32 {
	if x != nil {
		return x.IsExecutor
	}
	return 0
}

func (x *TaskMemberMessage) GetIsOwner() int32 {
	if x != nil {
		return x.IsOwner
	}
	return 0
}

type TaskMemberList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*TaskMemberMessage `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Total int64                `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *TaskMemberList) Reset() {
	*x = TaskMemberList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskMemberList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskMemberList) ProtoMessage() {}

func (x *TaskMemberList) ProtoReflect() protoreflect.Message {
	mi := &file_task_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskMemberList.ProtoReflect.Descriptor instead.
func (*TaskMemberList) Descriptor() ([]byte, []int) {
	return file_task_service_proto_rawDescGZIP(), []int{12}
}

func (x *TaskMemberList) GetList() []*TaskMemberMessage {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *TaskMemberList) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type TaskLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	MemberCode   string  `protobuf:"bytes,2,opt,name=MemberCode,proto3" json:"MemberCode,omitempty"`
	Content      string  `protobuf:"bytes,3,opt,name=Content,proto3" json:"Content,omitempty"`
	Remark       string  `protobuf:"bytes,4,opt,name=remark,proto3" json:"remark,omitempty"`
	Type         string  `protobuf:"bytes,5,opt,name=Type,proto3" json:"Type,omitempty"`
	CreateTime   string  `protobuf:"bytes,6,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`
	SourceCode   string  `protobuf:"bytes,7,opt,name=SourceCode,proto3" json:"SourceCode,omitempty"`
	ActionType   string  `protobuf:"bytes,8,opt,name=ActionType,proto3" json:"ActionType,omitempty"`
	ToMemberCode string  `protobuf:"bytes,9,opt,name=ToMemberCode,proto3" json:"ToMemberCode,omitempty"`
	IsComment    int32   `protobuf:"varint,10,opt,name=IsComment,proto3" json:"IsComment,omitempty"`
	ProjectCode  string  `protobuf:"bytes,11,opt,name=ProjectCode,proto3" json:"ProjectCode,omitempty"`
	Icon         string  `protobuf:"bytes,12,opt,name=Icon,proto3" json:"Icon,omitempty"`
	IsRobot      int32   `protobuf:"varint,13,opt,name=IsRobot,proto3" json:"IsRobot,omitempty"`
	Member       *Member `protobuf:"bytes,14,opt,name=member,proto3" json:"member,omitempty"`
}

func (x *TaskLog) Reset() {
	*x = TaskLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskLog) ProtoMessage() {}

func (x *TaskLog) ProtoReflect() protoreflect.Message {
	mi := &file_task_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskLog.ProtoReflect.Descriptor instead.
func (*TaskLog) Descriptor() ([]byte, []int) {
	return file_task_service_proto_rawDescGZIP(), []int{13}
}

func (x *TaskLog) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TaskLog) GetMemberCode() string {
	if x != nil {
		return x.MemberCode
	}
	return ""
}

func (x *TaskLog) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *TaskLog) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *TaskLog) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TaskLog) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *TaskLog) GetSourceCode() string {
	if x != nil {
		return x.SourceCode
	}
	return ""
}

func (x *TaskLog) GetActionType() string {
	if x != nil {
		return x.ActionType
	}
	return ""
}

func (x *TaskLog) GetToMemberCode() string {
	if x != nil {
		return x.ToMemberCode
	}
	return ""
}

func (x *TaskLog) GetIsComment() int32 {
	if x != nil {
		return x.IsComment
	}
	return 0
}

func (x *TaskLog) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *TaskLog) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *TaskLog) GetIsRobot() int32 {
	if x != nil {
		return x.IsRobot
	}
	return 0
}

func (x *TaskLog) GetMember() *Member {
	if x != nil {
		return x.Member
	}
	return nil
}

type Member struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Avatar string `protobuf:"bytes,3,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Code   string `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *Member) Reset() {
	*x = Member{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Member) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Member) ProtoMessage() {}

func (x *Member) ProtoReflect() protoreflect.Message {
	mi := &file_task_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Member.ProtoReflect.Descriptor instead.
func (*Member) Descriptor() ([]byte, []int) {
	return file_task_service_proto_rawDescGZIP(), []int{14}
}

func (x *Member) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Member) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Member) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *Member) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type TaskLogList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*TaskLog `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Total int64      `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *TaskLogList) Reset() {
	*x = TaskLogList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskLogList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskLogList) ProtoMessage() {}

func (x *TaskLogList) ProtoReflect() protoreflect.Message {
	mi := &file_task_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskLogList.ProtoReflect.Descriptor instead.
func (*TaskLogList) Descriptor() ([]byte, []int) {
	return file_task_service_proto_rawDescGZIP(), []int{15}
}

func (x *TaskLogList) GetList() []*TaskLog {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *TaskLogList) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type TaskWorkTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	MemberCode string  `protobuf:"bytes,2,opt,name=memberCode,proto3" json:"memberCode,omitempty"`
	CreateTime string  `protobuf:"bytes,3,opt,name=createTime,proto3" json:"createTime,omitempty"`
	Content    string  `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	BeginTime  string  `protobuf:"bytes,5,opt,name=beginTime,proto3" json:"beginTime,omitempty"`
	Num        int32   `protobuf:"varint,6,opt,name=num,proto3" json:"num,omitempty"`
	Code       string  `protobuf:"bytes,7,opt,name=code,proto3" json:"code,omitempty"`
	Member     *Member `protobuf:"bytes,8,opt,name=member,proto3" json:"member,omitempty"`
}

func (x *TaskWorkTime) Reset() {
	*x = TaskWorkTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskWorkTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskWorkTime) ProtoMessage() {}

func (x *TaskWorkTime) ProtoReflect() protoreflect.Message {
	mi := &file_task_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskWorkTime.ProtoReflect.Descriptor instead.
func (*TaskWorkTime) Descriptor() ([]byte, []int) {
	return file_task_service_proto_rawDescGZIP(), []int{16}
}

func (x *TaskWorkTime) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TaskWorkTime) GetMemberCode() string {
	if x != nil {
		return x.MemberCode
	}
	return ""
}

func (x *TaskWorkTime) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *TaskWorkTime) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *TaskWorkTime) GetBeginTime() string {
	if x != nil {
		return x.BeginTime
	}
	return ""
}

func (x *TaskWorkTime) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *TaskWorkTime) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *TaskWorkTime) GetMember() *Member {
	if x != nil {
		return x.Member
	}
	return nil
}

type TaskWorkTimeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*TaskWorkTime `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Total int64           `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *TaskWorkTimeResponse) Reset() {
	*x = TaskWorkTimeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskWorkTimeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskWorkTimeResponse) ProtoMessage() {}

func (x *TaskWorkTimeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_task_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskWorkTimeResponse.ProtoReflect.Descriptor instead.
func (*TaskWorkTimeResponse) Descriptor() ([]byte, []int) {
	return file_task_service_proto_rawDescGZIP(), []int{17}
}

func (x *TaskWorkTimeResponse) GetList() []*TaskWorkTime {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *TaskWorkTimeResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type SaveTaskWorkTimeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SaveTaskWorkTimeResponse) Reset() {
	*x = SaveTaskWorkTimeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveTaskWorkTimeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveTaskWorkTimeResponse) ProtoMessage() {}

func (x *SaveTaskWorkTimeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_task_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveTaskWorkTimeResponse.ProtoReflect.Descriptor instead.
func (*SaveTaskWorkTimeResponse) Descriptor() ([]byte, []int) {
	return file_task_service_proto_rawDescGZIP(), []int{18}
}

type TaskFileReqMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PathName         string `protobuf:"bytes,1,opt,name=pathName,proto3" json:"pathName,omitempty"`
	FileName         string `protobuf:"bytes,2,opt,name=fileName,proto3" json:"fileName,omitempty"`
	Extension        string `protobuf:"bytes,3,opt,name=extension,proto3" json:"extension,omitempty"`
	Size             int64  `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	ProjectCode      string `protobuf:"bytes,5,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
	TaskCode         string `protobuf:"bytes,6,opt,name=taskCode,proto3" json:"taskCode,omitempty"`
	OrganizationCode string `protobuf:"bytes,7,opt,name=organizationCode,proto3" json:"organizationCode,omitempty"`
	FileUrl          string `protobuf:"bytes,8,opt,name=fileUrl,proto3" json:"fileUrl,omitempty"`
	FileType         string `protobuf:"bytes,9,opt,name=fileType,proto3" json:"fileType,omitempty"`
	MemberId         int64  `protobuf:"varint,10,opt,name=memberId,proto3" json:"memberId,omitempty"`
}

func (x *TaskFileReqMessage) Reset() {
	*x = TaskFileReqMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskFileReqMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskFileReqMessage) ProtoMessage() {}

func (x *TaskFileReqMessage) ProtoReflect() protoreflect.Message {
	mi := &file_task_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskFileReqMessage.ProtoReflect.Descriptor instead.
func (*TaskFileReqMessage) Descriptor() ([]byte, []int) {
	return file_task_service_proto_rawDescGZIP(), []int{19}
}

func (x *TaskFileReqMessage) GetPathName() string {
	if x != nil {
		return x.PathName
	}
	return ""
}

func (x *TaskFileReqMessage) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *TaskFileReqMessage) GetExtension() string {
	if x != nil {
		return x.Extension
	}
	return ""
}

func (x *TaskFileReqMessage) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *TaskFileReqMessage) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *TaskFileReqMessage) GetTaskCode() string {
	if x != nil {
		return x.TaskCode
	}
	return ""
}

func (x *TaskFileReqMessage) GetOrganizationCode() string {
	if x != nil {
		return x.OrganizationCode
	}
	return ""
}

func (x *TaskFileReqMessage) GetFileUrl() string {
	if x != nil {
		return x.FileUrl
	}
	return ""
}

func (x *TaskFileReqMessage) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

func (x *TaskFileReqMessage) GetMemberId() int64 {
	if x != nil {
		return x.MemberId
	}
	return 0
}

type TaskFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TaskFileResponse) Reset() {
	*x = TaskFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskFileResponse) ProtoMessage() {}

func (x *TaskFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_task_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskFileResponse.ProtoReflect.Descriptor instead.
func (*TaskFileResponse) Descriptor() ([]byte, []int) {
	return file_task_service_proto_rawDescGZIP(), []int{20}
}

type TaskSourceMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int64         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code             string        `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	SourceType       string        `protobuf:"bytes,3,opt,name=sourceType,proto3" json:"sourceType,omitempty"`
	SourceCode       string        `protobuf:"bytes,4,opt,name=sourceCode,proto3" json:"sourceCode,omitempty"`
	LinkType         string        `protobuf:"bytes,5,opt,name=linkType,proto3" json:"linkType,omitempty"`
	LinkCode         string        `protobuf:"bytes,6,opt,name=linkCode,proto3" json:"linkCode,omitempty"`
	OrganizationCode string        `protobuf:"bytes,7,opt,name=OrganizationCode,proto3" json:"OrganizationCode,omitempty"`
	CreateBy         string        `protobuf:"bytes,8,opt,name=createBy,proto3" json:"createBy,omitempty"`
	CreateTime       string        `protobuf:"bytes,9,opt,name=createTime,proto3" json:"createTime,omitempty"`
	Sort             int32         `protobuf:"varint,10,opt,name=sort,proto3" json:"sort,omitempty"`
	Title            string        `protobuf:"bytes,11,opt,name=title,proto3" json:"title,omitempty"`
	SourceDetail     *SourceDetail `protobuf:"bytes,12,opt,name=sourceDetail,proto3" json:"sourceDetail,omitempty"`
}

func (x *TaskSourceMessage) Reset() {
	*x = TaskSourceMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskSourceMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskSourceMessage) ProtoMessage() {}

func (x *TaskSourceMessage) ProtoReflect() protoreflect.Message {
	mi := &file_task_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskSourceMessage.ProtoReflect.Descriptor instead.
func (*TaskSourceMessage) Descriptor() ([]byte, []int) {
	return file_task_service_proto_rawDescGZIP(), []int{21}
}

func (x *TaskSourceMessage) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TaskSourceMessage) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *TaskSourceMessage) GetSourceType() string {
	if x != nil {
		return x.SourceType
	}
	return ""
}

func (x *TaskSourceMessage) GetSourceCode() string {
	if x != nil {
		return x.SourceCode
	}
	return ""
}

func (x *TaskSourceMessage) GetLinkType() string {
	if x != nil {
		return x.LinkType
	}
	return ""
}

func (x *TaskSourceMessage) GetLinkCode() string {
	if x != nil {
		return x.LinkCode
	}
	return ""
}

func (x *TaskSourceMessage) GetOrganizationCode() string {
	if x != nil {
		return x.OrganizationCode
	}
	return ""
}

func (x *TaskSourceMessage) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *TaskSourceMessage) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *TaskSourceMessage) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *TaskSourceMessage) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *TaskSourceMessage) GetSourceDetail() *SourceDetail {
	if x != nil {
		return x.SourceDetail
	}
	return nil
}

type SourceDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code             string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	PathName         string `protobuf:"bytes,3,opt,name=pathName,proto3" json:"pathName,omitempty"`
	Title            string `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Extension        string `protobuf:"bytes,5,opt,name=Extension,proto3" json:"Extension,omitempty"`
	Size             int32  `protobuf:"varint,6,opt,name=size,proto3" json:"size,omitempty"`
	ObjectType       string `protobuf:"bytes,7,opt,name=ObjectType,proto3" json:"ObjectType,omitempty"`
	OrganizationCode string `protobuf:"bytes,8,opt,name=OrganizationCode,proto3" json:"OrganizationCode,omitempty"`
	TaskCode         string `protobuf:"bytes,9,opt,name=TaskCode,proto3" json:"TaskCode,omitempty"`
	ProjectCode      string `protobuf:"bytes,10,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
	CreateBy         string `protobuf:"bytes,11,opt,name=createBy,proto3" json:"createBy,omitempty"`
	CreateTime       string `protobuf:"bytes,12,opt,name=createTime,proto3" json:"createTime,omitempty"`
	Downloads        int32  `protobuf:"varint,13,opt,name=downloads,proto3" json:"downloads,omitempty"`
	Extra            string `protobuf:"bytes,14,opt,name=Extra,proto3" json:"Extra,omitempty"`
	Deleted          int32  `protobuf:"varint,15,opt,name=Deleted,proto3" json:"Deleted,omitempty"`
	FileUrl          string `protobuf:"bytes,16,opt,name=FileUrl,proto3" json:"FileUrl,omitempty"`
	FileType         string `protobuf:"bytes,17,opt,name=FileType,proto3" json:"FileType,omitempty"`
	DeletedTime      string `protobuf:"bytes,18,opt,name=deletedTime,proto3" json:"deletedTime,omitempty"`
	ProjectName      string `protobuf:"bytes,19,opt,name=ProjectName,proto3" json:"ProjectName,omitempty"`
	FullName         string `protobuf:"bytes,20,opt,name=FullName,proto3" json:"FullName,omitempty"`
}

func (x *SourceDetail) Reset() {
	*x = SourceDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourceDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceDetail) ProtoMessage() {}

func (x *SourceDetail) ProtoReflect() protoreflect.Message {
	mi := &file_task_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceDetail.ProtoReflect.Descriptor instead.
func (*SourceDetail) Descriptor() ([]byte, []int) {
	return file_task_service_proto_rawDescGZIP(), []int{22}
}

func (x *SourceDetail) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SourceDetail) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *SourceDetail) GetPathName() string {
	if x != nil {
		return x.PathName
	}
	return ""
}

func (x *SourceDetail) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SourceDetail) GetExtension() string {
	if x != nil {
		return x.Extension
	}
	return ""
}

func (x *SourceDetail) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *SourceDetail) GetObjectType() string {
	if x != nil {
		return x.ObjectType
	}
	return ""
}

func (x *SourceDetail) GetOrganizationCode() string {
	if x != nil {
		return x.OrganizationCode
	}
	return ""
}

func (x *SourceDetail) GetTaskCode() string {
	if x != nil {
		return x.TaskCode
	}
	return ""
}

func (x *SourceDetail) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *SourceDetail) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *SourceDetail) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *SourceDetail) GetDownloads() int32 {
	if x != nil {
		return x.Downloads
	}
	return 0
}

func (x *SourceDetail) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

func (x *SourceDetail) GetDeleted() int32 {
	if x != nil {
		return x.Deleted
	}
	return 0
}

func (x *SourceDetail) GetFileUrl() string {
	if x != nil {
		return x.FileUrl
	}
	return ""
}

func (x *SourceDetail) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

func (x *SourceDetail) GetDeletedTime() string {
	if x != nil {
		return x.DeletedTime
	}
	return ""
}

func (x *SourceDetail) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *SourceDetail) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

type TaskSourceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*TaskSourceMessage `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *TaskSourceResponse) Reset() {
	*x = TaskSourceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskSourceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskSourceResponse) ProtoMessage() {}

func (x *TaskSourceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_task_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskSourceResponse.ProtoReflect.Descriptor instead.
func (*TaskSourceResponse) Descriptor() ([]byte, []int) {
	return file_task_service_proto_rawDescGZIP(), []int{23}
}

func (x *TaskSourceResponse) GetList() []*TaskSourceMessage {
	if x != nil {
		return x.List
	}
	return nil
}

type CreateCommentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateCommentResponse) Reset() {
	*x = CreateCommentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCommentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCommentResponse) ProtoMessage() {}

func (x *CreateCommentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_task_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCommentResponse.ProtoReflect.Descriptor instead.
func (*CreateCommentResponse) Descriptor() ([]byte, []int) {
	return file_task_service_proto_rawDescGZIP(), []int{24}
}

var File_task_service_proto protoreflect.FileDescriptor

var file_task_service_proto_rawDesc = []byte{
	0x0a, 0x12, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x22, 0xba, 0x04, 0x0a, 0x0e, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x54, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x54, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x73,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x74, 0x61, 0x73,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x65,
	0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x72, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6e,
	0x65, 0x78, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x53, 0x74, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6f, 0x53, 0x74, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x61, 0x6c, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x61, 0x6c, 0x6c, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x4d,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x4d,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xdd, 0x01, 0x0a, 0x11, 0x54, 0x61, 0x73, 0x6b,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x57, 0x0a, 0x12, 0x54, 0x61, 0x73, 0x6b, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x22, 0xa6, 0x01, 0x0a, 0x14, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x18, 0x0a, 0x07, 0x69, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x69, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0x5d, 0x0a, 0x15, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xa0, 0x08, 0x0a, 0x0b, 0x54, 0x61, 0x73,
	0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x50, 0x72, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x50, 0x72, 0x69,
	0x12, 0x24, 0x0a, 0x0d, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x42, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x42, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x6f, 0x6e, 0x65, 0x42, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x6f, 0x6e, 0x65, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x44, 0x6f, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x44, 0x6f, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x54, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x54, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x53, 0x74, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x53, 0x74, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x54, 0x61, 0x73, 0x6b, 0x54, 0x61, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x54,
	0x61, 0x73, 0x6b, 0x54, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x6f, 0x6e, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x65,
	0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x42,
	0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x50, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6f, 0x72, 0x74,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x4c, 0x69, 0x6b, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x4c, 0x69, 0x6b, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x53, 0x74, 0x61, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x53, 0x74, 0x61, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x49, 0x64, 0x4e, 0x75, 0x6d, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x49, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x57, 0x6f, 0x72, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x57, 0x6f, 0x72, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x12, 0x31,
	0x0a, 0x08, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f,
	0x72, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x54, 0x65, 0x78, 0x74, 0x18, 0x25, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x69, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x65, 0x78, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x65, 0x78, 0x74, 0x22, 0x51, 0x0a, 0x0f, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x39,
	0x0a, 0x10, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x12, 0x0a, 0x10, 0x54, 0x61, 0x73,
	0x6b, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x94, 0x0b,
	0x0a, 0x0d, 0x4d, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x72, 0x69, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x50, 0x72, 0x69, 0x12, 0x24, 0x0a, 0x0d, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x44,
	0x6f, 0x6e, 0x65, 0x42, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x6f, 0x6e,
	0x65, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x6f, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x44, 0x6f, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x54, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x54, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x74, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x61, 0x67, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x61, 0x67, 0x12, 0x12, 0x0a,
	0x04, 0x44, 0x6f, 0x6e, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x44, 0x6f, 0x6e,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x6d,
	0x69, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52,
	0x65, 0x6d, 0x69, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x53, 0x6f, 0x72, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x53,
	0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4c, 0x69, 0x6b, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x4c, 0x69, 0x6b, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x74, 0x61, 0x72, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x53, 0x74, 0x61, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x64, 0x4e, 0x75, 0x6d,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x49, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x12, 0x0a,
	0x04, 0x50, 0x61, 0x74, 0x68, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x43,
	0x6f, 0x76, 0x65, 0x72, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x43, 0x6f, 0x76, 0x65,
	0x72, 0x12, 0x2c, 0x0a, 0x11, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x57, 0x68, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x57, 0x68, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x24, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x27, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x4f,
	0x70, 0x65, 0x6e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x28, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x6e, 0x42,
	0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x4f, 0x70, 0x65, 0x6e, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x18, 0x2c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x61, 0x73, 0x6b,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x61, 0x73, 0x6b, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x12,
	0x2e, 0x0a, 0x12, 0x41, 0x75, 0x74, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x41, 0x75, 0x74,
	0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12,
	0x31, 0x0a, 0x08, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x18, 0x2f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x53, 0x0a, 0x12, 0x4d, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e,
	0x4d, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xcb, 0x01, 0x0a, 0x11, 0x54, 0x61,
	0x73, 0x6b, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x2c, 0x0a, 0x11, 0x6d, 0x65, 0x6d, 0x62, 0x61, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x65, 0x6d, 0x62,
	0x61, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x69, 0x73, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x69, 0x73, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x69, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x69, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0x53, 0x0a, 0x0e, 0x54, 0x61, 0x73, 0x6b, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x97, 0x03, 0x0a,
	0x07, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x6f, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x54, 0x6f, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x6f, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x49, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x52, 0x6f, 0x62, 0x6f,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x49, 0x73, 0x52, 0x6f, 0x62, 0x6f, 0x74,
	0x12, 0x24, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x06,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x58, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x22, 0x46, 0x0a, 0x0b, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x6f, 0x67, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xe2, 0x01, 0x0a, 0x0c, 0x54, 0x61, 0x73,
	0x6b, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x6e, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x54, 0x0a,
	0x14, 0x54, 0x61, 0x73, 0x6b, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x57,
	0x6f, 0x72, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x22, 0x1a, 0x0a, 0x18, 0x53, 0x61, 0x76, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x57,
	0x6f, 0x72, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xba, 0x02, 0x0a, 0x12, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x74, 0x68, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x74, 0x68, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a,
	0x0a, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69,
	0x6c, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c,
	0x65, 0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x22, 0x12, 0x0a, 0x10,
	0x54, 0x61, 0x73, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xf9, 0x02, 0x0a, 0x11, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x69,
	0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x69,
	0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f,
	0x72, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x36, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x61, 0x73,
	0x6b, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0c,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0xc0, 0x04, 0x0a,
	0x0c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x78, 0x74, 0x72, 0x61, 0x12,
	0x18, 0x0a, 0x07, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x69, 0x6c,
	0x65, 0x55, 0x72, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x46, 0x69, 0x6c, 0x65,
	0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x41, 0x0a, 0x12, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x22, 0x17, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x92, 0x07, 0x0a, 0x0b,
	0x54, 0x61, 0x73, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x54,
	0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x67, 0x65, 0x73, 0x12, 0x14, 0x2e, 0x74, 0x61, 0x73, 0x6b,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a,
	0x18, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x11, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x14, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x1b, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x14, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x16, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x35, 0x0a, 0x08, 0x53, 0x61, 0x76, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x14, 0x2e,
	0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x1a, 0x11, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b,
	0x53, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x71, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x16, 0x2e, 0x74, 0x61, 0x73,
	0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0a, 0x4d, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x14, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x71, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x18, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e,
	0x4d, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x08, 0x52, 0x65, 0x61, 0x64, 0x54, 0x61, 0x73, 0x6b,
	0x12, 0x14, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x11, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0e, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x2e,
	0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x1a, 0x14, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x07, 0x54,
	0x61, 0x73, 0x6b, 0x4c, 0x6f, 0x67, 0x12, 0x14, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x71, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x11, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x00, 0x12, 0x46, 0x0a, 0x10, 0x54, 0x61, 0x73, 0x6b, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x69, 0x6d,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x71, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x1a, 0x2e, 0x74, 0x61,
	0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x10, 0x53, 0x61, 0x76,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x2e,
	0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x1a, 0x1e, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0c, 0x53, 0x61, 0x76, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x18, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a,
	0x16, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0b, 0x54, 0x61, 0x73,
	0x6b, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x14, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x18,
	0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0d, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x2e, 0x74, 0x61,
	0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x1a, 0x1b, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x42, 0x22, 0x5a, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2d, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x74, 0x61, 0x73, 0x6b, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_task_service_proto_rawDescOnce sync.Once
	file_task_service_proto_rawDescData = file_task_service_proto_rawDesc
)

func file_task_service_proto_rawDescGZIP() []byte {
	file_task_service_proto_rawDescOnce.Do(func() {
		file_task_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_task_service_proto_rawDescData)
	})
	return file_task_service_proto_rawDescData
}

var file_task_service_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_task_service_proto_goTypes = []interface{}{
	(*TaskReqMessage)(nil),           // 0: task.TaskReqMessage
	(*TaskStagesMessage)(nil),        // 1: task.TaskStagesMessage
	(*TaskStagesResponse)(nil),       // 2: task.TaskStagesResponse
	(*MemberProjectMessage)(nil),     // 3: task.MemberProjectMessage
	(*MemberProjectResponse)(nil),    // 4: task.MemberProjectResponse
	(*TaskMessage)(nil),              // 5: task.TaskMessage
	(*ExecutorMessage)(nil),          // 6: task.ExecutorMessage
	(*TaskListResponse)(nil),         // 7: task.TaskListResponse
	(*TaskSortResponse)(nil),         // 8: task.TaskSortResponse
	(*MyTaskMessage)(nil),            // 9: task.MyTaskMessage
	(*MyTaskListResponse)(nil),       // 10: task.MyTaskListResponse
	(*TaskMemberMessage)(nil),        // 11: task.TaskMemberMessage
	(*TaskMemberList)(nil),           // 12: task.TaskMemberList
	(*TaskLog)(nil),                  // 13: task.TaskLog
	(*Member)(nil),                   // 14: task.Member
	(*TaskLogList)(nil),              // 15: task.TaskLogList
	(*TaskWorkTime)(nil),             // 16: task.TaskWorkTime
	(*TaskWorkTimeResponse)(nil),     // 17: task.TaskWorkTimeResponse
	(*SaveTaskWorkTimeResponse)(nil), // 18: task.SaveTaskWorkTimeResponse
	(*TaskFileReqMessage)(nil),       // 19: task.TaskFileReqMessage
	(*TaskFileResponse)(nil),         // 20: task.TaskFileResponse
	(*TaskSourceMessage)(nil),        // 21: task.TaskSourceMessage
	(*SourceDetail)(nil),             // 22: task.SourceDetail
	(*TaskSourceResponse)(nil),       // 23: task.TaskSourceResponse
	(*CreateCommentResponse)(nil),    // 24: task.CreateCommentResponse
}
var file_task_service_proto_depIdxs = []int32{
	1,  // 0: task.TaskStagesResponse.list:type_name -> task.TaskStagesMessage
	3,  // 1: task.MemberProjectResponse.list:type_name -> task.MemberProjectMessage
	6,  // 2: task.TaskMessage.executor:type_name -> task.ExecutorMessage
	5,  // 3: task.TaskListResponse.list:type_name -> task.TaskMessage
	6,  // 4: task.MyTaskMessage.executor:type_name -> task.ExecutorMessage
	9,  // 5: task.MyTaskListResponse.list:type_name -> task.MyTaskMessage
	11, // 6: task.TaskMemberList.list:type_name -> task.TaskMemberMessage
	14, // 7: task.TaskLog.member:type_name -> task.Member
	13, // 8: task.TaskLogList.list:type_name -> task.TaskLog
	14, // 9: task.TaskWorkTime.member:type_name -> task.Member
	16, // 10: task.TaskWorkTimeResponse.list:type_name -> task.TaskWorkTime
	22, // 11: task.TaskSourceMessage.sourceDetail:type_name -> task.SourceDetail
	21, // 12: task.TaskSourceResponse.list:type_name -> task.TaskSourceMessage
	0,  // 13: task.TaskService.TaskStages:input_type -> task.TaskReqMessage
	0,  // 14: task.TaskService.MemberProjectList:input_type -> task.TaskReqMessage
	0,  // 15: task.TaskService.TaskList:input_type -> task.TaskReqMessage
	0,  // 16: task.TaskService.SaveTask:input_type -> task.TaskReqMessage
	0,  // 17: task.TaskService.TaskSort:input_type -> task.TaskReqMessage
	0,  // 18: task.TaskService.MyTaskList:input_type -> task.TaskReqMessage
	0,  // 19: task.TaskService.ReadTask:input_type -> task.TaskReqMessage
	0,  // 20: task.TaskService.ListTaskMember:input_type -> task.TaskReqMessage
	0,  // 21: task.TaskService.TaskLog:input_type -> task.TaskReqMessage
	0,  // 22: task.TaskService.TaskWorkTimeList:input_type -> task.TaskReqMessage
	0,  // 23: task.TaskService.SaveTaskWorkTime:input_type -> task.TaskReqMessage
	19, // 24: task.TaskService.SaveTaskFile:input_type -> task.TaskFileReqMessage
	0,  // 25: task.TaskService.TaskSources:input_type -> task.TaskReqMessage
	0,  // 26: task.TaskService.CreateComment:input_type -> task.TaskReqMessage
	2,  // 27: task.TaskService.TaskStages:output_type -> task.TaskStagesResponse
	4,  // 28: task.TaskService.MemberProjectList:output_type -> task.MemberProjectResponse
	7,  // 29: task.TaskService.TaskList:output_type -> task.TaskListResponse
	5,  // 30: task.TaskService.SaveTask:output_type -> task.TaskMessage
	8,  // 31: task.TaskService.TaskSort:output_type -> task.TaskSortResponse
	10, // 32: task.TaskService.MyTaskList:output_type -> task.MyTaskListResponse
	5,  // 33: task.TaskService.ReadTask:output_type -> task.TaskMessage
	12, // 34: task.TaskService.ListTaskMember:output_type -> task.TaskMemberList
	15, // 35: task.TaskService.TaskLog:output_type -> task.TaskLogList
	17, // 36: task.TaskService.TaskWorkTimeList:output_type -> task.TaskWorkTimeResponse
	18, // 37: task.TaskService.SaveTaskWorkTime:output_type -> task.SaveTaskWorkTimeResponse
	20, // 38: task.TaskService.SaveTaskFile:output_type -> task.TaskFileResponse
	23, // 39: task.TaskService.TaskSources:output_type -> task.TaskSourceResponse
	24, // 40: task.TaskService.CreateComment:output_type -> task.CreateCommentResponse
	27, // [27:41] is the sub-list for method output_type
	13, // [13:27] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_task_service_proto_init() }
func file_task_service_proto_init() {
	if File_task_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_task_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskReqMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskStagesMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskStagesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberProjectMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberProjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutorMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskSortResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyTaskMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyTaskListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskMemberMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskMemberList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Member); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskLogList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskWorkTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskWorkTimeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveTaskWorkTimeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskFileReqMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskSourceMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SourceDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskSourceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCommentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_task_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_task_service_proto_goTypes,
		DependencyIndexes: file_task_service_proto_depIdxs,
		MessageInfos:      file_task_service_proto_msgTypes,
	}.Build()
	File_task_service_proto = out.File
	file_task_service_proto_rawDesc = nil
	file_task_service_proto_goTypes = nil
	file_task_service_proto_depIdxs = nil
}
